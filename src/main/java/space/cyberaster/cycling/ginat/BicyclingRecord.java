// automatically generated by the FlatBuffers compiler, do not modify

package space.cyberaster.cycling.ginat;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.Table;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class BicyclingRecord extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static BicyclingRecord getRootAsBicyclingRecord(ByteBuffer _bb) { return getRootAsBicyclingRecord(_bb, new BicyclingRecord()); }
  public static BicyclingRecord getRootAsBicyclingRecord(ByteBuffer _bb, BicyclingRecord obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public BicyclingRecord __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long startTimestamp() { int o = __offset(4); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public long endTimestamp() { int o = __offset(6); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public int totalTimerTime() { int o = __offset(8); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public float totalDistance() { int o = __offset(10); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public float totalCalories() { int o = __offset(12); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public int maxSpeed() { int o = __offset(14); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int avgSpeed() { int o = __offset(16); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int totalAvgSpeed() { int o = __offset(18); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int maxCadence() { int o = __offset(20); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public float avgCadence() { int o = __offset(22); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public int maxHeartRate() { int o = __offset(24); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public float avgHeartRate() { int o = __offset(26); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public float maxPower() { int o = __offset(28); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public float avgPower() { int o = __offset(30); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public double totalAscent() { int o = __offset(32); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  public double totalDescent() { int o = __offset(34); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  public double maxAltitude() { int o = __offset(36); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  public double minAltitude() { int o = __offset(38); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  public int m6026s() { int o = __offset(40); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int m6025t() { int o = __offset(42); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int m6024u() { int o = __offset(44); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int m6023v() { int o = __offset(46); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public BicyclingRecordLap bicyclingRecordLap(int j) { return bicyclingRecordLap(new BicyclingRecordLap(), j); }
  public BicyclingRecordLap bicyclingRecordLap(BicyclingRecordLap obj, int j) { int o = __offset(48); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int bicyclingRecordLapLength() { int o = __offset(48); return o != 0 ? __vector_len(o) : 0; }
  public BicyclingRecordLap.Vector bicyclingRecordLapVector() { return bicyclingRecordLapVector(new BicyclingRecordLap.Vector()); }
  public BicyclingRecordLap.Vector bicyclingRecordLapVector(BicyclingRecordLap.Vector obj) { int o = __offset(48); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createBicyclingRecord(FlatBufferBuilder builder,
      long startTimestamp,
      long endTimestamp,
      int totalTimerTime,
      float totalDistance,
      float totalCalories,
      int maxSpeed,
      int avgSpeed,
      int totalAvgSpeed,
      int maxCadence,
      float avgCadence,
      int maxHeartRate,
      float avgHeartRate,
      float maxPower,
      float avgPower,
      double totalAscent,
      double totalDescent,
      double maxAltitude,
      double minAltitude,
      int m6026s,
      int m6025t,
      int m6024u,
      int m6023v,
      int bicyclingRecordLapOffset) {
    builder.startTable(23);
    BicyclingRecord.addMinAltitude(builder, minAltitude);
    BicyclingRecord.addMaxAltitude(builder, maxAltitude);
    BicyclingRecord.addTotalDescent(builder, totalDescent);
    BicyclingRecord.addTotalAscent(builder, totalAscent);
    BicyclingRecord.addEndTimestamp(builder, endTimestamp);
    BicyclingRecord.addStartTimestamp(builder, startTimestamp);
    BicyclingRecord.addBicyclingRecordLap(builder, bicyclingRecordLapOffset);
    BicyclingRecord.addM6023v(builder, m6023v);
    BicyclingRecord.addM6024u(builder, m6024u);
    BicyclingRecord.addM6025t(builder, m6025t);
    BicyclingRecord.addM6026s(builder, m6026s);
    BicyclingRecord.addAvgPower(builder, avgPower);
    BicyclingRecord.addMaxPower(builder, maxPower);
    BicyclingRecord.addAvgHeartRate(builder, avgHeartRate);
    BicyclingRecord.addMaxHeartRate(builder, maxHeartRate);
    BicyclingRecord.addAvgCadence(builder, avgCadence);
    BicyclingRecord.addMaxCadence(builder, maxCadence);
    BicyclingRecord.addTotalAvgSpeed(builder, totalAvgSpeed);
    BicyclingRecord.addAvgSpeed(builder, avgSpeed);
    BicyclingRecord.addMaxSpeed(builder, maxSpeed);
    BicyclingRecord.addTotalCalories(builder, totalCalories);
    BicyclingRecord.addTotalDistance(builder, totalDistance);
    BicyclingRecord.addTotalTimerTime(builder, totalTimerTime);
    return BicyclingRecord.endBicyclingRecord(builder);
  }

  public static void startBicyclingRecord(FlatBufferBuilder builder) { builder.startTable(23); }
  public static void addStartTimestamp(FlatBufferBuilder builder, long startTimestamp) { builder.addLong(0, startTimestamp, 0L); }
  public static void addEndTimestamp(FlatBufferBuilder builder, long endTimestamp) { builder.addLong(1, endTimestamp, 0L); }
  public static void addTotalTimerTime(FlatBufferBuilder builder, int totalTimerTime) { builder.addInt(2, totalTimerTime, 0); }
  public static void addTotalDistance(FlatBufferBuilder builder, float totalDistance) { builder.addFloat(3, totalDistance, 0.0f); }
  public static void addTotalCalories(FlatBufferBuilder builder, float totalCalories) { builder.addFloat(4, totalCalories, 0.0f); }
  public static void addMaxSpeed(FlatBufferBuilder builder, int maxSpeed) { builder.addInt(5, maxSpeed, 0); }
  public static void addAvgSpeed(FlatBufferBuilder builder, int avgSpeed) { builder.addInt(6, avgSpeed, 0); }
  public static void addTotalAvgSpeed(FlatBufferBuilder builder, int totalAvgSpeed) { builder.addInt(7, totalAvgSpeed, 0); }
  public static void addMaxCadence(FlatBufferBuilder builder, int maxCadence) { builder.addInt(8, maxCadence, 0); }
  public static void addAvgCadence(FlatBufferBuilder builder, float avgCadence) { builder.addFloat(9, avgCadence, 0.0f); }
  public static void addMaxHeartRate(FlatBufferBuilder builder, int maxHeartRate) { builder.addInt(10, maxHeartRate, 0); }
  public static void addAvgHeartRate(FlatBufferBuilder builder, float avgHeartRate) { builder.addFloat(11, avgHeartRate, 0.0f); }
  public static void addMaxPower(FlatBufferBuilder builder, float maxPower) { builder.addFloat(12, maxPower, 0.0f); }
  public static void addAvgPower(FlatBufferBuilder builder, float avgPower) { builder.addFloat(13, avgPower, 0.0f); }
  public static void addTotalAscent(FlatBufferBuilder builder, double totalAscent) { builder.addDouble(14, totalAscent, 0.0); }
  public static void addTotalDescent(FlatBufferBuilder builder, double totalDescent) { builder.addDouble(15, totalDescent, 0.0); }
  public static void addMaxAltitude(FlatBufferBuilder builder, double maxAltitude) { builder.addDouble(16, maxAltitude, 0.0); }
  public static void addMinAltitude(FlatBufferBuilder builder, double minAltitude) { builder.addDouble(17, minAltitude, 0.0); }
  public static void addM6026s(FlatBufferBuilder builder, int m6026s) { builder.addInt(18, m6026s, 0); }
  public static void addM6025t(FlatBufferBuilder builder, int m6025t) { builder.addInt(19, m6025t, 0); }
  public static void addM6024u(FlatBufferBuilder builder, int m6024u) { builder.addInt(20, m6024u, 0); }
  public static void addM6023v(FlatBufferBuilder builder, int m6023v) { builder.addInt(21, m6023v, 0); }
  public static void addBicyclingRecordLap(FlatBufferBuilder builder, int bicyclingRecordLapOffset) { builder.addOffset(22, bicyclingRecordLapOffset, 0); }
  public static int createBicyclingRecordLapVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startBicyclingRecordLapVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endBicyclingRecord(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishBicyclingRecordBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
  public static void finishSizePrefixedBicyclingRecordBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public BicyclingRecord get(int j) { return get(new BicyclingRecord(), j); }
    public BicyclingRecord get(BicyclingRecord obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

