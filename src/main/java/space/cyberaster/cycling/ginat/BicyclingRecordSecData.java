// automatically generated by the FlatBuffers compiler, do not modify

package space.cyberaster.cycling.ginat;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.Table;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class BicyclingRecordSecData extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static BicyclingRecordSecData getRootAsBicyclingRecordSecData(ByteBuffer _bb) { return getRootAsBicyclingRecordSecData(_bb, new BicyclingRecordSecData()); }
  public static BicyclingRecordSecData getRootAsBicyclingRecordSecData(ByteBuffer _bb, BicyclingRecordSecData obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public BicyclingRecordSecData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long currentTime() { int o = __offset(4); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public byte dataType() { int o = __offset(6); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public int cumulativeTotalSecond() { int o = __offset(8); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public float cumulativeTotalDistance() { int o = __offset(10); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public float cumulativeTotalCalories() { int o = __offset(12); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public int speed() { int o = __offset(14); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int cadence() { int o = __offset(16); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int hr() { int o = __offset(18); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public float power() { int o = __offset(20); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public double altitude() { int o = __offset(22); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  public double latitude() { int o = __offset(24); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  public double longitude() { int o = __offset(26); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  public int horizontalAccuracy() { int o = __offset(28); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int verticalAccuracy() { int o = __offset(30); return o != 0 ? bb.getInt(o + bb_pos) : 0; }

  public static int createBicyclingRecordSecData(FlatBufferBuilder builder,
      long currentTime,
      byte dataType,
      int cumulativeTotalSecond,
      float cumulativeTotalDistance,
      float cumulativeTotalCalories,
      int speed,
      int cadence,
      int hr,
      float power,
      double altitude,
      double latitude,
      double longitude,
      int horizontalAccuracy,
      int verticalAccuracy) {
    builder.startTable(14);
    BicyclingRecordSecData.addLongitude(builder, longitude);
    BicyclingRecordSecData.addLatitude(builder, latitude);
    BicyclingRecordSecData.addAltitude(builder, altitude);
    BicyclingRecordSecData.addCurrentTime(builder, currentTime);
    BicyclingRecordSecData.addVerticalAccuracy(builder, verticalAccuracy);
    BicyclingRecordSecData.addHorizontalAccuracy(builder, horizontalAccuracy);
    BicyclingRecordSecData.addPower(builder, power);
    BicyclingRecordSecData.addHr(builder, hr);
    BicyclingRecordSecData.addCadence(builder, cadence);
    BicyclingRecordSecData.addSpeed(builder, speed);
    BicyclingRecordSecData.addCumulativeTotalCalories(builder, cumulativeTotalCalories);
    BicyclingRecordSecData.addCumulativeTotalDistance(builder, cumulativeTotalDistance);
    BicyclingRecordSecData.addCumulativeTotalSecond(builder, cumulativeTotalSecond);
    BicyclingRecordSecData.addDataType(builder, dataType);
    return BicyclingRecordSecData.endBicyclingRecordSecData(builder);
  }

  public static void startBicyclingRecordSecData(FlatBufferBuilder builder) { builder.startTable(14); }
  public static void addCurrentTime(FlatBufferBuilder builder, long currentTime) { builder.addLong(0, currentTime, 0L); }
  public static void addDataType(FlatBufferBuilder builder, byte dataType) { builder.addByte(1, dataType, 0); }
  public static void addCumulativeTotalSecond(FlatBufferBuilder builder, int cumulativeTotalSecond) { builder.addInt(2, cumulativeTotalSecond, 0); }
  public static void addCumulativeTotalDistance(FlatBufferBuilder builder, float cumulativeTotalDistance) { builder.addFloat(3, cumulativeTotalDistance, 0.0f); }
  public static void addCumulativeTotalCalories(FlatBufferBuilder builder, float cumulativeTotalCalories) { builder.addFloat(4, cumulativeTotalCalories, 0.0f); }
  public static void addSpeed(FlatBufferBuilder builder, int speed) { builder.addInt(5, speed, 0); }
  public static void addCadence(FlatBufferBuilder builder, int cadence) { builder.addInt(6, cadence, 0); }
  public static void addHr(FlatBufferBuilder builder, int hr) { builder.addInt(7, hr, 0); }
  public static void addPower(FlatBufferBuilder builder, float power) { builder.addFloat(8, power, 0.0f); }
  public static void addAltitude(FlatBufferBuilder builder, double altitude) { builder.addDouble(9, altitude, 0.0); }
  public static void addLatitude(FlatBufferBuilder builder, double latitude) { builder.addDouble(10, latitude, 0.0); }
  public static void addLongitude(FlatBufferBuilder builder, double longitude) { builder.addDouble(11, longitude, 0.0); }
  public static void addHorizontalAccuracy(FlatBufferBuilder builder, int horizontalAccuracy) { builder.addInt(12, horizontalAccuracy, 0); }
  public static void addVerticalAccuracy(FlatBufferBuilder builder, int verticalAccuracy) { builder.addInt(13, verticalAccuracy, 0); }
  public static int endBicyclingRecordSecData(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public BicyclingRecordSecData get(int j) { return get(new BicyclingRecordSecData(), j); }
    public BicyclingRecordSecData get(BicyclingRecordSecData obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

