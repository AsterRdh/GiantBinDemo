// automatically generated by the FlatBuffers compiler, do not modify

package space.cyberaster.cycling.ginat;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.Table;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class BicyclingRecordLap extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static BicyclingRecordLap getRootAsBicyclingRecordLap(ByteBuffer _bb) { return getRootAsBicyclingRecordLap(_bb, new BicyclingRecordLap()); }
  public static BicyclingRecordLap getRootAsBicyclingRecordLap(ByteBuffer _bb, BicyclingRecordLap obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public BicyclingRecordLap __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public short m6020a() { int o = __offset(4); return o != 0 ? bb.getShort(o + bb_pos) : 0; }
  public int lapTimerTime() { int o = __offset(6); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public float lapDistance() { int o = __offset(8); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public float lapCalories() { int o = __offset(10); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public int maxSpeed() { int o = __offset(12); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int avgSpeed() { int o = __offset(14); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int lapAvgSpeed() { int o = __offset(16); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int maxCadence() { int o = __offset(18); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public float avgCadence() { int o = __offset(20); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public int maxHeartRate() { int o = __offset(22); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public float avgHeartRate() { int o = __offset(24); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public float maxPower() { int o = __offset(26); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public float avgPower() { int o = __offset(28); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public double lapAscent() { int o = __offset(30); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  public double lapDescent() { int o = __offset(32); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  public double maxAltitude() { int o = __offset(34); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  public double minAltitude() { int o = __offset(36); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  public int m5969r() { int o = __offset(38); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int m5968s() { int o = __offset(40); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int m5967t() { int o = __offset(42); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int m5966u() { int o = __offset(44); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public BicyclingRecordSecData bicyclingRecordSecData(int j) { return bicyclingRecordSecData(new BicyclingRecordSecData(), j); }
  public BicyclingRecordSecData bicyclingRecordSecData(BicyclingRecordSecData obj, int j) { int o = __offset(46); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int bicyclingRecordSecDataLength() { int o = __offset(46); return o != 0 ? __vector_len(o) : 0; }
  public BicyclingRecordSecData.Vector bicyclingRecordSecDataVector() { return bicyclingRecordSecDataVector(new BicyclingRecordSecData.Vector()); }
  public BicyclingRecordSecData.Vector bicyclingRecordSecDataVector(BicyclingRecordSecData.Vector obj) { int o = __offset(46); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createBicyclingRecordLap(FlatBufferBuilder builder,
      short m6020a,
      int lapTimerTime,
      float lapDistance,
      float lapCalories,
      int maxSpeed,
      int avgSpeed,
      int lapAvgSpeed,
      int maxCadence,
      float avgCadence,
      int maxHeartRate,
      float avgHeartRate,
      float maxPower,
      float avgPower,
      double lapAscent,
      double lapDescent,
      double maxAltitude,
      double minAltitude,
      int m5969r,
      int m5968s,
      int m5967t,
      int m5966u,
      int bicyclingRecordSecDataOffset) {
    builder.startTable(22);
    BicyclingRecordLap.addMinAltitude(builder, minAltitude);
    BicyclingRecordLap.addMaxAltitude(builder, maxAltitude);
    BicyclingRecordLap.addLapDescent(builder, lapDescent);
    BicyclingRecordLap.addLapAscent(builder, lapAscent);
    BicyclingRecordLap.addBicyclingRecordSecData(builder, bicyclingRecordSecDataOffset);
    BicyclingRecordLap.addM5966u(builder, m5966u);
    BicyclingRecordLap.addM5967t(builder, m5967t);
    BicyclingRecordLap.addM5968s(builder, m5968s);
    BicyclingRecordLap.addM5969r(builder, m5969r);
    BicyclingRecordLap.addAvgPower(builder, avgPower);
    BicyclingRecordLap.addMaxPower(builder, maxPower);
    BicyclingRecordLap.addAvgHeartRate(builder, avgHeartRate);
    BicyclingRecordLap.addMaxHeartRate(builder, maxHeartRate);
    BicyclingRecordLap.addAvgCadence(builder, avgCadence);
    BicyclingRecordLap.addMaxCadence(builder, maxCadence);
    BicyclingRecordLap.addLapAvgSpeed(builder, lapAvgSpeed);
    BicyclingRecordLap.addAvgSpeed(builder, avgSpeed);
    BicyclingRecordLap.addMaxSpeed(builder, maxSpeed);
    BicyclingRecordLap.addLapCalories(builder, lapCalories);
    BicyclingRecordLap.addLapDistance(builder, lapDistance);
    BicyclingRecordLap.addLapTimerTime(builder, lapTimerTime);
    BicyclingRecordLap.addM6020a(builder, m6020a);
    return BicyclingRecordLap.endBicyclingRecordLap(builder);
  }

  public static void startBicyclingRecordLap(FlatBufferBuilder builder) { builder.startTable(22); }
  public static void addM6020a(FlatBufferBuilder builder, short m6020a) { builder.addShort(0, m6020a, 0); }
  public static void addLapTimerTime(FlatBufferBuilder builder, int lapTimerTime) { builder.addInt(1, lapTimerTime, 0); }
  public static void addLapDistance(FlatBufferBuilder builder, float lapDistance) { builder.addFloat(2, lapDistance, 0.0f); }
  public static void addLapCalories(FlatBufferBuilder builder, float lapCalories) { builder.addFloat(3, lapCalories, 0.0f); }
  public static void addMaxSpeed(FlatBufferBuilder builder, int maxSpeed) { builder.addInt(4, maxSpeed, 0); }
  public static void addAvgSpeed(FlatBufferBuilder builder, int avgSpeed) { builder.addInt(5, avgSpeed, 0); }
  public static void addLapAvgSpeed(FlatBufferBuilder builder, int lapAvgSpeed) { builder.addInt(6, lapAvgSpeed, 0); }
  public static void addMaxCadence(FlatBufferBuilder builder, int maxCadence) { builder.addInt(7, maxCadence, 0); }
  public static void addAvgCadence(FlatBufferBuilder builder, float avgCadence) { builder.addFloat(8, avgCadence, 0.0f); }
  public static void addMaxHeartRate(FlatBufferBuilder builder, int maxHeartRate) { builder.addInt(9, maxHeartRate, 0); }
  public static void addAvgHeartRate(FlatBufferBuilder builder, float avgHeartRate) { builder.addFloat(10, avgHeartRate, 0.0f); }
  public static void addMaxPower(FlatBufferBuilder builder, float maxPower) { builder.addFloat(11, maxPower, 0.0f); }
  public static void addAvgPower(FlatBufferBuilder builder, float avgPower) { builder.addFloat(12, avgPower, 0.0f); }
  public static void addLapAscent(FlatBufferBuilder builder, double lapAscent) { builder.addDouble(13, lapAscent, 0.0); }
  public static void addLapDescent(FlatBufferBuilder builder, double lapDescent) { builder.addDouble(14, lapDescent, 0.0); }
  public static void addMaxAltitude(FlatBufferBuilder builder, double maxAltitude) { builder.addDouble(15, maxAltitude, 0.0); }
  public static void addMinAltitude(FlatBufferBuilder builder, double minAltitude) { builder.addDouble(16, minAltitude, 0.0); }
  public static void addM5969r(FlatBufferBuilder builder, int m5969r) { builder.addInt(17, m5969r, 0); }
  public static void addM5968s(FlatBufferBuilder builder, int m5968s) { builder.addInt(18, m5968s, 0); }
  public static void addM5967t(FlatBufferBuilder builder, int m5967t) { builder.addInt(19, m5967t, 0); }
  public static void addM5966u(FlatBufferBuilder builder, int m5966u) { builder.addInt(20, m5966u, 0); }
  public static void addBicyclingRecordSecData(FlatBufferBuilder builder, int bicyclingRecordSecDataOffset) { builder.addOffset(21, bicyclingRecordSecDataOffset, 0); }
  public static int createBicyclingRecordSecDataVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startBicyclingRecordSecDataVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endBicyclingRecordLap(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public BicyclingRecordLap get(int j) { return get(new BicyclingRecordLap(), j); }
    public BicyclingRecordLap get(BicyclingRecordLap obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

